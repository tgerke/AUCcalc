for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
ROCRest[i] <- performance(prediction(dat$x, dat$y), "auc")@y.values[[1]]
}
)
# test pROC package
pROCest <- rep(0, iter)
set.seed(8675309)
system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
pROCest[i] <- auc(response=dat$y, predictor=dat$x, direction="<")
}
)
# test PerfMeas package
PerfMeasest <- rep(0, iter)
set.seed(8675309)
system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
PerfMeasest[i] <- AUC.single(dat$x, dat$y)
}
)
# test a simple one-liner
Simpleest <- rep(0, iter)
set.seed(8675309)
system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
Simpleest[i] <- sum(vapply(dat$x[which(dat$y==1)], function(z) sum(z>dat$x[which(dat$y==0)]), 0))/sum(dat$y)/sum(dat$y==0)
}
)
summary(ROCRest - pROCest)
summary(ROCRest - PerfMeasest)
summary(ROCRest - Simpleest)
sum(dat$x[which(dat$y==1)]>dat$x[which(dat$y==0)])
iter <- 1e4
# test ROCR package
ROCRest <- rep(0, iter)
set.seed(8675309)
system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
ROCRest[i] <- performance(prediction(dat$x, dat$y), "auc")@y.values[[1]]
}
)
# test pROC package
pROCest <- rep(0, iter)
set.seed(8675309)
system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
pROCest[i] <- auc(response=dat$y, predictor=dat$x, direction="<")
}
)
# test PerfMeas package
PerfMeasest <- rep(0, iter)
set.seed(8675309)
system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
PerfMeasest[i] <- AUC.single(dat$x, dat$y)
}
)
# test a simple one-liner
Simpleest <- rep(0, iter)
set.seed(8675309)
system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
Simpleest[i] <- sum(vapply(dat$x[which(dat$y==1)],
function(z) sum(z>dat$x[which(dat$y==0)]), 0))/sum(dat$y)/sum(dat$y==0)
}
)
# do they all give equivalent estimates?
summary(ROCRest - pROCest)
summary(ROCRest - PerfMeasest)
summary(ROCRest - Simpleest)
AUC.single()
AUC.single
install.packages("glmnet")
library(glmnet)
# test pROC package
pROCest <- rep(0, iter)
set.seed(8675309)
system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
pROCest[i] <- pROC:::auc(response=dat$y, predictor=dat$x, direction="<")
}
)
glmnet:::auc
# test glmnet package
glmnetest <- rep(0, iter)
set.seed(8675309)
system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
glmnetest[i] <- glmnet:::auc(y=dat$y, prob=dat$x)
}
)
summary(ROCRest - glmnetest)
performance
AUC.single
auROC
summary(ROCRest - Simpleest)
Simpleest <- rep(0, iter)
set.seed(8675309)
system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
Simpleest[i] <- sum(vapply(dat$x[which(dat$y==1)],
function(z) sum(z>dat$x[which(dat$y==0)]), 0))/sum(dat$y)/sum(dat$y==0)
}
)
sys.time()
system.time()
Sys.time()
iter <- 1e3
# test ROCR package
ROCRest <- rep(0, iter)
set.seed(8675309)
system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
ROCRest[i] <- performance(prediction(dat$x, dat$y), "auc")@y.values[[1]]
}
)
system.time
ROCRest <- rep(0, iter)
set.seed(8675309)
system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
ROCRest[i] <- performance(prediction(dat$x, dat$y), "auc")@y.values[[1]]
}
)$elapsed
ROCRest <- rep(0, iter)
set.seed(8675309)
temp <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
ROCRest[i] <- performance(prediction(dat$x, dat$y), "auc")@y.values[[1]]
}
)
temp
names(temp)
temp[3]
iter <- 1e3
# test ROCR package
ROCRest <- rep(0, iter)
set.seed(8675309)
ROCRtime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
ROCRest[i] <- performance(prediction(dat$x, dat$y), "auc")@y.values[[1]]
}
)[3]
iter <- 1e3
# test ROCR package
ROCRest <- rep(0, iter)
set.seed(8675309)
ROCRtime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
ROCRest[i] <- performance(prediction(dat$x, dat$y), "auc")@y.values[[1]]
}
)[3]
# test pROC package
pROCest <- rep(0, iter)
set.seed(8675309)
pROCtime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
pROCest[i] <- pROC:::auc(response=dat$y, predictor=dat$x, direction="<")
}
)[3]
# test PerfMeas package
PerfMeasest <- rep(0, iter)
set.seed(8675309)
PerfMeastime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
PerfMeasest[i] <- AUC.single(dat$x, dat$y)
}
)[3]
# test glmnet package
glmnetest <- rep(0, iter)
set.seed(8675309)
glmnettime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
glmnetest[i] <- glmnet:::auc(y=dat$y, prob=dat$x)
}
)[3]
# test a simple one-liner
Simpleest <- rep(0, iter)
set.seed(8675309)
Simpleesttime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
Simpleest[i] <- sum(vapply(dat$x[which(dat$y==1)],
function(z) sum(z>dat$x[which(dat$y==0)]), 0))/sum(dat$y)/sum(dat$y==0)
}
)[3]
timings
timings <- data.frame(ROCR=ROCRtime, pROC=pROCtime,
PerfMeas=PerfMeastime, glmnet=glmnettime,
Simpleest=Simpleesttime)
timings
?vapply
dat$x[dat$y==1]
# test a simple one-liner
Simpleest <- rep(0, iter)
set.seed(8675309)
Simpleesttime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
Simpleest[i] <- sum(vapply(dat$x[dat$y==1],
function(z) sum(z>dat$x[dat$y==0]), 0))/sum(dat$y)/sum(dat$y==0)
}
)[3]
timings <- data.frame(ROCR=ROCRtime, pROC=pROCtime,
PerfMeas=PerfMeastime, glmnet=glmnettime,
Simpleest=Simpleesttime)
timings
Simpleest <- rep(0, iter)
set.seed(8675309)
Simpleesttime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
Simpleest[i] <- sum(sapply(dat$x[dat$y==1],
function(z) sum(z>dat$x[dat$y==0])))/sum(dat$y)/sum(dat$y==0)
}
)[3]
timings <- data.frame(ROCR=ROCRtime, pROC=pROCtime,
PerfMeas=PerfMeastime, glmnet=glmnettime,
Simpleest=Simpleesttime)
timings
dat$x[dat$y]
dat$x[dat$y==1]
# test a simple one-liner
Simpleest <- rep(0, iter)
set.seed(8675309)
Simpleesttime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
x1 <- dat$x[dat$y==1]
x0 <- dat$x[dat$y==0]
Simpleest[i] <- sum(vapply(x1,
function(z) sum(z>x0), 0))/sum(dat$y)/sum(dat$y==0)
}
)[3]
timings <- data.frame(ROCR=ROCRtime, pROC=pROCtime,
PerfMeas=PerfMeastime, glmnet=glmnettime,
Simpleest=Simpleesttime)
timings
length(x1)
length(x0)
Simpleest <- rep(0, iter)
set.seed(8675309)
Simpleesttime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
x1 <- dat$x[dat$y==1]
x0 <- dat$x[dat$y==0]
Simpleest[i] <- sum(vapply(x1,
function(z) sum(z>x0), 0))/length(x1)/length(x0)
}
)[3]
timings <- data.frame(ROCR=ROCRtime, pROC=pROCtime,
PerfMeas=PerfMeastime, glmnet=glmnettime,
Simpleest=Simpleesttime)
timings
glmnet:::auc
# test a simple one-liner
Simpleest <- rep(0, iter)
set.seed(8675309)
Simpleesttime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
x1 <- dat$x[dat$y==1]
x0 <- dat$x[dat$y==0]
n1 <- length(x1)
n0 <- length(x0)
Simpleest[i] <- sum(vapply(x1,
function(z) sum(z>x0), 0))/n1/n0
}
)[3]
timings <- data.frame(ROCR=ROCRtime, pROC=pROCtime,
PerfMeas=PerfMeastime, glmnet=glmnettime,
Simpleest=Simpleesttime)
timings
iter <- 1e4
# test ROCR package
ROCRest <- rep(0, iter)
set.seed(8675309)
ROCRtime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
ROCRest[i] <- performance(prediction(dat$x, dat$y), "auc")@y.values[[1]]
}
)[3]
# test pROC package
pROCest <- rep(0, iter)
set.seed(8675309)
pROCtime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
pROCest[i] <- pROC:::auc(response=dat$y, predictor=dat$x, direction="<")
}
)[3]
# test PerfMeas package
PerfMeasest <- rep(0, iter)
set.seed(8675309)
PerfMeastime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
PerfMeasest[i] <- AUC.single(dat$x, dat$y)
}
)[3]
# test glmnet package
glmnetest <- rep(0, iter)
set.seed(8675309)
glmnettime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
glmnetest[i] <- glmnet:::auc(y=dat$y, prob=dat$x)
}
)[3]
# test a simple one-liner
Simpleest <- rep(0, iter)
set.seed(8675309)
Simpleesttime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
x1 <- dat$x[dat$y==1]
x0 <- dat$x[dat$y==0]
n1 <- length(x1)
n0 <- length(x0)
Simpleest[i] <- sum(vapply(x1, function(z) sum(z>x0), 0))/n1/n0
}
)[3]
# do they all give equivalent estimates?
summary(ROCRest - pROCest)
summary(ROCRest - PerfMeasest)
summary(ROCRest - glmnetest)
summary(ROCRest - Simpleest)
timings <- data.frame(ROCR=ROCRtime, pROC=pROCtime,
PerfMeas=PerfMeastime, glmnet=glmnettime,
Simpleest=Simpleesttime)
timings
glmnet:::auc
summary(ROCRest - Simpleest)
library(AUC)
install.packages("AUC")
library(AUC)
# test pROC package
pROCest <- rep(0, iter)
set.seed(8675309)
pROCtime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
pROCest[i] <- pROC:::auc(response=dat$y, predictor=dat$x, direction="<")
}
)[3]
timings <- data.frame(ROCR=ROCRtime, pROC=pROCtime,
PerfMeas=PerfMeastime, glmnet=glmnettime,
Simpleest=Simpleesttime)
timings
?AUC:::auv
?AUC:::auc
?AUC:::roc
# test AUC package
AUCest <- rep(0, iter)
set.seed(8675309)
AUCtime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
AUCest[i] <- AUC:::auc(AUC:::roc(dat$x, dat$y))
}
)[3]
AUC:::roc(dat$x, dat$y)
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
dat$x, dat$y
roc(dat$x, dat$y)
?AUC:::roc
# test AUC package
AUCest <- rep(0, iter)
set.seed(8675309)
AUCtime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
AUCest[i] <- AUC:::auc(AUC:::roc(dat$x, as.factor(dat$y)))
}
)[3]
summary(ROCRest - AUCest)
summary(ROCRest - PerfMeasest)
timings <- data.frame(ROCR=ROCRtime, pROC=pROCtime, AUC=AUCtime,
PerfMeas=PerfMeastime, glmnet=glmnettime,
Simpleest=Simpleesttime)
timings
##############################################################################
# compare various AUC-calculating functions + a custom script
library(pROC)
library(ROCR)
library(PerfMeas)
library(glmnet) #note that this masks auc() from pROC
library(AUC) #so does this
# log which versions are installed
sessionInfo()
##############################################################################
# simulate binomial y with p=.2 and standard normal x
iter <- 1e4
# test ROCR package
ROCRest <- rep(0, iter)
set.seed(8675309)
ROCRtime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
ROCRest[i] <- performance(prediction(dat$x, dat$y), "auc")@y.values[[1]]
}
)[3]
# test pROC package
pROCest <- rep(0, iter)
set.seed(8675309)
pROCtime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
pROCest[i] <- pROC:::auc(response=dat$y, predictor=dat$x, direction="<")
}
)[3]
# test AUC package
AUCest <- rep(0, iter)
set.seed(8675309)
AUCtime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
AUCest[i] <- AUC:::auc(AUC:::roc(dat$x, as.factor(dat$y)))
}
)[3]
# test PerfMeas package
PerfMeasest <- rep(0, iter)
set.seed(8675309)
PerfMeastime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
PerfMeasest[i] <- AUC.single(dat$x, dat$y)
}
)[3]
# test glmnet package
glmnetest <- rep(0, iter)
set.seed(8675309)
glmnettime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
glmnetest[i] <- glmnet:::auc(y=dat$y, prob=dat$x)
}
)[3]
# test a simpler function
Simpleest <- rep(0, iter)
set.seed(8675309)
Simpleesttime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
x1 <- dat$x[dat$y==1]
x0 <- dat$x[dat$y==0]
n1 <- length(x1)
n0 <- length(x0)
Simpleest[i] <- sum(vapply(x1, function(z) sum(z>x0), 0))/n1/n0
}
)[3]
# do they all give equivalent estimates?
summary(ROCRest - pROCest)
summary(ROCRest - AUCest)
summary(ROCRest - PerfMeasest)
summary(ROCRest - glmnetest)
summary(ROCRest - Simpleest)
timings <- data.frame(ROCR=ROCRtime, pROC=pROCtime, AUC=AUCtime,
PerfMeas=PerfMeastime, glmnet=glmnettime,
Simpleest=Simpleesttime)
timings
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
Hmiscest <- rep(0, iter)
set.seed(8675309)
?somers2
somers2(dat$x, dat$y)
# test Hmisc package
Hmiscest <- rep(0, iter)
set.seed(8675309)
Hmisctime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
Hmiscest[i] <- somers2(dat$x, dat$y)$C
}
)[3]
# test Hmisc package
Hmiscest <- rep(0, iter)
set.seed(8675309)
Hmisctime <- system.time(
for (i in 1:iter) {
dat <- data.frame(y=rbinom(100, 1, .2), x=rnorm(100))
Hmiscest[i] <- somers2(dat$x, dat$y)[1]
}
)[3]
summary(ROCRest - Hmiscest)
timings <- data.frame(ROCR=ROCRtime, pROC=pROCtime, AUC=AUCtime,
PerfMeas=PerfMeastime, Hmisc=Hmisctime,
glmnet=glmnettime, Simpleest=Simpleesttime)
timings
